#
# This file is part of Everit - Infinispan Cache.
#
# Everit - Infinispan Cache is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Everit - Infinispan Cache is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Everit - Infinispan Cache.  If not, see <http://www.gnu.org/licenses/>.
#


## Factory

org.everit.osgi.cache.infinispan.CacheFactory.name=CacheFactory (Infinispan) (Everit)
org.everit.osgi.cache.infinispan.CacheFactory.description=A component that makes possible to create customized JSR-107 Cache instances.

clustered.name=Clustered
clustered.description= Whether or not this cache factory accepts clustered cache configurations. In case this property is false, cache configurations with CacheMode.LOCAL are accepted only. In case of clustered caches, both local and clustered cache configurations are accepted.

transport.clusterName.name=Transport - Cluster name
transport.clusterName.description=Defines the name of the cluster. Nodes only connect to clusters sharing the same name.

transport.configurationXML.name=Transport - Configuration XML
transport.configurationXML.description=The full JGroups configuration XML. Should be pasted in one row. Example: https://github.com/infinispan/infinispan/blob/master/core/src/main/resources/jgroups-udp.xml.

transport.distributedSyncTimeout.name=Transport - Distributed synchronization timeout
transport.distributedSyncTimeout.description=Timeout for coordinating cluster formation when nodes join or leave the cluster.

transport.machineId.name=Transport - Machine ID
transport.machineId.description=The id of the machine where this node runs. Used for <a href="http://community.jboss.org/wiki/DesigningServerHinting">server hinting</a>.

transport.nodeName.name=Transport - Node name
transport.nodeName.description=Name of the current node. This is a friendly name to make logs, etc. make more sense. Defaults to a combination of host name and a random number (to differentiate multiple nodes on the same host).

transport.rackId.name=Transport - Rack ID
transport.rackId.description=The id of the rack where this node runs. Used for <a href="http://community.jboss.org/wiki/DesigningServerHinting">server hinting</a>.

transport.siteId.name=Transport - Site ID
transport.siteId.description=The id of the site where this node runs. Used for <a href="http://community.jboss.org/wiki/DesigningServerHinting">server hinting</a>.

globalJmxStatistics.enabled.name=Global JMX Statistics
globalJmxStatistics.enabled.description=Configures whether global statistics are gathered and reported via JMX for all caches under this cache manager.

globalJmxStatistics.jmxDomain.name=Global JMX Statistics - Domain
globalJmxStatistics.jmxDomain.description=If JMX statistics are enabled then all 'published' JMX objects will appear under this name. This is optional, if not specified an object name will be created for you by default.

globalJmxStatistics.allowDuplicateDomains.name=Global JMX Statistics - Allow duplicate domains
globalJmxStatistics.allowDuplicateDomains.description=If true, multiple cache manager instances could be configured under the same configured JMX domain. Each cache manager will in practice use a different JMX domain that has been calculated based on the configured one by adding an incrementing index to it.

globalJmxStatistics.cacheManagerName.name=Global JMX Statistics - Cache Manager name
globalJmxStatistics.cacheManagerName.description=If JMX statistics are enabled, this property represents the name of this cache manager. It offers the possibility for clients to provide a user-defined name to the cache manager which later can be used to identify the cache manager within a JMX based management tool amongst other cache managers that might be running under the same JVM. The cache manager name must be unique even if the jmx is not enabled in configuration. Therefore the default is the service PID that is unique for sure.

logService.target.name=LogService Target
logService.target.description=OSGi filter of LogService

## Configuration

org.everit.osgi.cache.infinispan.CacheConfiguration.name=Cache Configuration (Infinispan) (Everit)
org.everit.osgi.cache.infinispan.CacheConfiguration.description=Cache configuration for Infinispan

cacheName.name=Cache name
cacheName.description=Name of the cache. Must be unique.

eviction.maxEntries.name=Eviction - Max entries
eviction.maxEntries.description=Maximum number of entries in a cache instance. Cache size is guaranteed not to exceed upper limit specified by max entries. However, due to the nature of eviction it is unlikely to ever be exactly maximum number of entries specified here.

eviction.strategy.name=Eviction - Strategy
eviction.strategy.description=viction strategy. Available options are 'UNORDERED', 'LRU', 'LIRS' and 'NONE' (to disable eviction).

eviction.threadPolicy.name=Eviction - Thread policy
eviction.threadPolicy.description=Threading policy for eviction.

expiration.lifespan.name=Expiration - Lifespan
expiration.lifespan.description=Maximum lifespan of a cache entry, after which the entry is expired cluster-wide, in milliseconds. -1 means the entries never expire.

expiration.maxIdle.name=Expiration - Max idle
expiration.maxIdle.description=Maximum idle time a cache entry will be maintained in the cache, in milliseconds. If the idle time is exceeded, the entry will be expired cluster-wide. -1 means the entries never expire.

expiration.reaperEnabled.name=Expiration - Reaper
expiration.reaperEnabled.description=Enable the background reaper to test entries for expiration. Regardless of whether a reaper is used, entries are tested for expiration lazily when they are touched.

expiration.wakeUpInterval.name=Expiration - Wake up interval
expiration.wakeUpInterval.description=Interval (in milliseconds) between subsequent runs to purge expired entries from memory and any cache stores. If you wish to disable the periodic eviction process altogether, set wakeupInterval to -1.

invocationBatching.enabled.name=Invocation batching
invocationBatching.enabled.description=Invocation batching

clustering.cacheMode.name=Clustering - Cache mode
clustering.cacheMode.description=Cache replication mode.

clustering.async.asyncMarshalling.name=Clustering - Async - AsyncMarshalling
clustering.async.asyncMarshalling.description=Enable asynchronous marshalling. This allows the caller to return even quicker, but it can suffer from reordering of operations. You can find more information at <a href="https://docs.jboss.org/author/display/ISPN/Asynchronous+Options" >https://docs.jboss.org/author/display/ISPN/Asynchronous+Options</a>.

clustering.async.useReplQueue.name=Clustering - Async - Use replication queue
clustering.async.useReplQueue.description=If true, forces all async communications to be queued up and sent out periodically as a batch.

clustering.async.replQueueInterval.name=Clustering - Async - Replication Queue Interval
clustering.async.replQueueInterval.description=If useReplQueue is set to true, this attribute controls how often the asynchronous thread used to flush the replication queue runs.

clustering.async.replQueueMaxElements.name=Clustering - Async - Replication Queue Max Elements
clustering.async.replQueueMaxElements.description=If useReplQueue is set to true, this attribute can be used to trigger flushing of the queue when it reaches a specific threshold.

clustering.hash.numOwners.name=Clustering - Hash - Owner num.
clustering.hash.numOwners.description=Number of cluster-wide replicas for each cache entry.

clustering.hash.numSegments.name=Clustering - Hash - Segment num.
clustering.hash.numSegments.description=Controls the total number of hash space segments (per cluster). A hash space segment is the granularity for key distribution in the cluster: a node can own (or primary-own) one more even distribution of keys between nodes. On the other hand, the memory/bandwidth usage of the new consistent hash grows linearly with {@code numSegments}. So we recommend keeping {@code numSegments <= 10 * clusterSize}. Must be strictly positive.

clustering.hash.capacityFactor.name=Clustering - Hash - Capacity factor
clustering.hash.capacityFactor.description=Controls the proportion of entries that will reside on the local node, compared to the other nodes in the cluster. This is just a suggestion, there is no guarantee that a node with a capacity factor of {@code 2} will have twice as many entries as a node with a capacity factor of {@code 1}. Must be positive.

clustering.l1.enabled.name=Clustering - L1
clustering.l1.enabled.description=Enables L1 cache. Used in 'distributed' caches instances. In any other cache modes, this is ignored.

clustering.l1.invalidationThreshold.name=Clustering - L1 - Invalidation threshold
clustering.l1.invalidationThreshold.description=Determines whether a multicast or a web of unicasts are used when performing L1 invalidations. By default multicast will be used. If the threshold is set to -1, then unicasts will always be used. If the threshold is set to 0, then multicast will be always be used.

clustering.l1.lifespan.name=Clustering - L1 - Lifespan
clustering.l1.lifespan.description=Maximum lifespan of an entry placed in the L1 cache.

clustering.l1.onRehash.name=Clustering - L1 - On rehash
clustering.l1.onRehash.description=Entries removed due to a rehash will be moved to L1 rather than being removed altogether.

clustering.l1.cleanupTaskFrequency.name=Clustering - L1 - Cleanup task frequency
clustering.l1.cleanupTaskFrequency.description=How often the L1 requestors map is cleaned up of stale items.

clustering.stateTransfer.fetchInMemoryState.name=Clustering - State transfer - Fetch in memory state
clustering.stateTransfer.fetchInMemoryState.description=If {@code true}, the cache will fetch data from the neighboring caches when it starts up, so the cache starts 'warm', although it will impact startup time. In distributed mode, state is transferred between running caches as well, as the ownership of keys changes (e.g. because a cache left the cluster). Disabling this setting means a key will sometimes have less than {@code numOwner} owners.

clustering.stateTransfer.awaitInitialTransfer.name=Clustering - State transfer - Await initial transfer
clustering.stateTransfer.awaitInitialTransfer.description=If {@code true}, this will cause the first call to method {@code CacheManager.getCache()} on the joiner node to block and wait until the joining is complete and the cache has finished receiving state from neighboring caches (if fetchInMemoryState is enabled). This option applies to distributed and replicated caches only and is enabled by default. Please note that setting this to {@code false} will make the cache object available immediately but any access to keys that should be available locally but are not yet transferred will actually cause a (transparent) remote access. While this will not have any impact on the logic of your application it might impact performance.

clustering.stateTransfer.chunkSize.name=Clustering - State transfer - Chunk size
clustering.stateTransfer.chunkSize.description=If > 0, the state will be transferred in batches of {@code chunkSize} cache entries. If <= 0, the state will be transferred in all at once. Not recommended.

clustering.stateTransfer.timeout.name=Clustering - State transfer - Timeout
clustering.stateTransfer.timeout.description=This is the maximum amount of time - in milliseconds - to wait for state from neighboring caches, before throwing an exception and aborting startup.

clustering.sync.replTimeout.name=Clustering - State transfer - Replication timeout
clustering.sync.replTimeout.description=This is the timeout used to wait for an acknowledgment when making a remote call, after which the call is aborted and an exception is thrown.

locking.concurrencyLevel.name=Locking - Concurrency level
locking.concurrencyLevel.description=Concurrency level for lock containers. Adjust this value according to the number of concurrent threads interacting with Infinispan. Similar to the concurrencyLevel tuning parameter seen in the JDK's ConcurrentHashMap.

locking.isolationLevel.name=Locking - Isolation level
locking.isolationLevel.description=Cache isolation level. Infinispan only supports READ_COMMITTED or REPEATABLE_READ isolation levels. See <a href='http://en.wikipedia.org/wiki/Isolation_level'>http://en.wikipedia.org/wiki/Isolation_level</a> for a discussion on isolation levels.

locking.lockAcquisitionTimeout.name=Locking - Lock aquisition timeout
locking.lockAcquisitionTimeout.description=Maximum time to attempt a particular lock acquisition.

locking.useLockStriping.name=Locking - Use lock striping
locking.useLockStriping.description=If true, a pool of shared locks is maintained for all entries that need to be locked. Otherwise, a lock is created per entry in the cache. Lock striping helps control memory footprint but may reduce concurrency in the system.

locking.writeSkewCheck.name=Locking - Write skew check
locking.writeSkewCheck.description=This setting is only applicable in the case of REPEATABLE_READ. When write skew check is set to false, if the writer at commit time discovers that the working entry and the underlying entry have different versions, the working entry will overwrite the underlying entry. If true, such version conflict - known as a write-skew - will throw an Exception.

deadlockDetection.enabled.name=Deadlock detection
deadlockDetection.enabled.description=Enable or disable deadlock detection.

deadlockDetection.spinDuration.name=Deadlock detection - Spin duration
deadlockDetection.spinDuration.description=Time period that determines how often is lock acquisition attempted within maximum time allowed to acquire a particular lock.

transaction.transactionMode.name=Transaction - Transaction mode
transaction.transactionMode.description=Whether the cache is transactional or not.

transactionManager.target.name=Transaction manager OSGi filter
transactionManager.target.description=OSGi filter expression for the transaction manager service.

transactionSynchronizationRegistry.target.name=Transaction synchronization registry OSGi filter
transactionSynchronizationRegistry.target.description=OSGi filter expression for the transaction synchronization registry service.

transaction.autoCommit.name=Transaction - Auto commit
transaction.autoCommit.description=If true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. Next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. This gives you the ability to 'overflow' to disk, similar to swapping in an operating system. If false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. This essentially gives you a 'write-through' configuration.

transaction.cacheStopTimeout.name=Transaction - Cache stop timeout
transaction.cacheStopTimeout.description=If there are any ongoing transactions when a cache is stopped, Infinispan waits for ongoing remote and local transactions to finish. The amount of time to wait for is defined by the cache stop timeout. It is recommended that this value does not exceed the transaction timeout because even if a new transaction was started just before the cache was stopped, this could only last as long as the transaction timeout allows it. This configuration property may be adjusted at runtime.

transaction.lockingMode.name=Transaction - Locking mode
transaction.lockingMode.description=Configures whether the cache uses optimistic or pessimistic locking. If the cache is not transactional then the locking mode is ignored.OPTIMISTIC or PESSIMISTIC.

transaction.syncCommitPhase.name=Transaction - Sync commit phase
transaction.syncCommitPhase.description=If true, the cluster-wide commit phase in two-phase commit (2PC) transactions will be synchronous, so Infinispan will wait for responses from all nodes to which the commit was sent. Otherwise, the commit phase will be asynchronous. Keeping it as false improves performance of 2PC transactions, since any remote failures are trapped during the prepare phase anyway and appropriate rollbacks are issued. This configuration property may be adjusted at runtime.

transaction.syncRollbackPhase.name=Transaction - Sync rollback phase
transaction.syncRollbackPhase.description=If true, the cluster-wide rollback phase in two-phase commit (2PC) transactions will be synchronous, so Infinispan will wait for responses from all nodes to which the rollback was sent. Otherwise, the rollback phase will be asynchronous. Keeping it as false improves performance of 2PC transactions. This configuration property may be adjusted at runtime.

transaction.useSynchronization.name=Transaction - Use synchronization
transaction.useSynchronization.description=Configures whether the cache registers a synchronization with the transaction manager, or registers itself as an XA resource. It is often unnecessary to register as a full XA resource unless you intend to make use of recovery as well, and registering a synchronization is significantly more efficient. If true, Synchronizations are used rather than XAResources when communicating with a TransactionManager.

transaction.recovery.enabled.name=Transaction - Recovery enabled
transaction.recovery.enabled.description=Enable recovery for this cache.

transaction.recovery.recoveryInfoCacheName.name=Transaction - Recovery info cache name
transaction.recovery.recoveryInfoCacheName.description=ets the name of the cache where recovery related information is held. If not specified defaults to a cache named RecoveryConfiguration#DEFAULT_RECOVERY_INFO_CACHE.

transaction.use1PcForAutoCommitTransactions.name=Transaction - Use 1PC for auto commit transactions
transaction.use1PcForAutoCommitTransactions.description=Before Infinispan 5.1 you could access the cache both transactionally and non-transactionally. Naturally the non-transactional access is faster and offers less consistency guarantees. From Infinispan 5.1 onwards, mixed access is no longer supported, so if you wanna speed up transactional caches and you're ready to trade some consistency guarantees, you can enable use1PcForAutoCommitTransactions. What this configuration option does is force an induced transaction, that has been started by Infinispan as a result of enabling autoCommit, to commit in a single phase. So only 1 RPC instead of 2RPCs as in the case of a full 2 Phase Commit (2PC).

transaction.reaperWakeUpInterval.name=Transaction - Reaper wake up interval
transaction.reaperWakeUpInterval.description=The time interval (millis) at which the thread that cleans up transaction completion information kicks in. Defaults to 1000.

transaction.completedTxTimeout.name=Transaction - Completed TX timeout
transaction.completedTxTimeout.description=The duration (millis) in which to keep information about the completion of a transaction. Defaults to 15000.

transaction.transactionProtocol.name=Transaction - Transaction protocol
transaction.transactionProtocol.description=DEFAULT: uses the 2PC protocol, TOTAL_ORDER: uses the total order protocol.

versioning.enabled.name=Versioning
versioning.enabled.description=

versioning.scheme.name=Versioning - Scheme
versioning.scheme.description=

jmxStatistics.enabled.name=JMX statistics
jmxStatistics.enabled.description=Determines whether statistics are gather and reported.

